2. 作用域
----------------

.. _namespaces:

2.1. 名字空间
~~~~~~~~~~~~~~~~~~~~~~~~

.. tip::

    除几个例外情况外，请在名字空间中书写代码. 名字空间应当有独一无二的基于项目名的名字。鼓励在 ``.cc`` 文件内使用匿名名字空间.  请勿使用 using 指示（using-directive）。也请勿使用内联命名空间（inline namespace）。

定义:

    名字空间将全局作用域细分为独立的、具名的作用域, 可有效防止全局作用域的命名冲突.

优点:

    名字空间提供了在大型程序中防止命名冲突的解决办法, 同时允许大多数代码使用相当短的名称.

    举例来说, 两个不同项目的全局作用域都有一个类 ``Foo``, 这些符号将在编译或运行时产生冲突. 如果每个项目将代码置于不同名字空间中, ``project1::Foo`` 和 ``project2::Foo`` 作为不同符号自然不会冲突, 并且在每个项目的名字空间中的代码可以继续引用各自的 ``Foo`` 而不需要添加前缀.

    内联命名空间会自动把内部的标识符放到外层作用域，比如：

    .. code-block:: c++

        namespace X {
        inline namespace Y {
        void foo();
        }
        }
 
 
    ``X::Y::foo()`` 与 ``X::foo()`` 彼此可代替. 内联命名空间主要用来保持跨版本的 ABI 兼容性.


缺点:

    名字空间有时具有迷惑性, 因为它们使弄清楚一个名字指代什么定义变得复杂.

    内联命名空间很容易令人迷惑, 毕竟它们不再受其声明所在命名空间的限制. 内联命名空间只在大型版本控制里有用.

    在头文件中使用匿名空间很容易导致违背 C++ 的唯一定义原则 (One Definition Rule (ODR)).
    
    在某些情况下，必须要重复地以完整名称来引用一些符号. 对于深层嵌套的名字空间而言，这样会添加不少麻烦.

结论:

    根据下文将要提到的策略合理使用命名空间. 在名字空间结束时如下面的例子一样给出注释. 另请参见： :ref:`namespace names` .

2.1.1. 匿名名字空间
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- 在 ``.cc`` 文件中, 允许甚至鼓励使用匿名名字空间, 以避免运行时的命名冲突:

    .. code-block:: c++

        namespace {                             // .cc 文件中

        // 名字空间的内容无需缩进
        //
        // 这个函数保证在链接时不会与其他符号产生冲突
        // 并且只对本.cc文件中的调用者可见
        bool UpdateInternals(Frobber* f, int newval) {
          ...
        }
        
        } // namespace


- 不要在 ``.h`` 文件中使用匿名名字空间.

2.1.2. 具名的名字空间
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

具名的名字空间使用方式如下:

    - 使用名字空间把文件包含、`gflags <http://code.google.com/p/google-gflags/>`_ 的声明/定义和来自其他名字空间的类的前置声明之后的整个源文件封装起来:

        .. code-block:: c++

            // .h 文件
            namespace mynamespace {

            // 所有声明都置于命名空间中
            // 注意不要使用缩进
            class MyClass {
             public:
              ...
              void Foo();
            };

            }  // namespace mynamespace


        .. code-block:: c++

            // .cc 文件
            namespace mynamespace {

            // 函数定义都置于命名空间中
            void MyClass::Foo() {
              ...
            }

            }  // namespace mynamespace


        更复杂的 ``.cc`` 文件包含更多的细节, 比如定义标志、 ``using`` 声明等等.

        .. code-block:: c++

            #include "a.h"

            DEFINE_bool(someflag, false, “dummy flag”);
            
            using ::foo::bar;

            namespace a {
            ...code for a...        // Code goes against the left margin.
            }


    - 不要在名字空间 ``std`` 内声明任何东西, 包括标准库的类前置声明. 在 ``std`` 名字空间声明实体会导致不确定的问题, 也就意味着不可移植. 声明标准库下的实体, 需要包含对应的头文件.

    - 最好不要使用 using 指示来让该名字空间下的所有名称都可以使用.

        .. code-block:: c++

            // 禁止 —— 这样会污染名字空间
            using namespace foo;


    - 不要在头文件中的名字空间作用域内使用名字空间别名, 除非这个名字空间被明确标记为内部使用. 任何被导入进一个头文件中的名字空间的内容都会被该文件导出为公共的API. 
    
        .. code-block:: c++
        
            // 在.cc 文件中使用别名来缩短要访问的名字
            namespace baz = ::foo::bar::baz;


        .. code-block:: c++
            
            // 在.h文件中使用别名来缩短缩短要访问的名字
            namespace librarian {
            namespace implement { // 内部使用的, 不是API的一部分
            namesapce sidetable = ::pipline_diagnostice::sidetable;
            }  // namespace impl

            inline void my_inline_function() {
              // 别名被限定在函数或方法的作用域内
              namespace baz = ::foo::bar::baz;
              ...
            }
            }  // namespace librarian


    - 禁止用内联命名空间

2.2. 非成员函数、静态成员函数和全局函数
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tip::

    尽量将非成员函数放在名字空间中; 尽量不要用裸的全局函数. 不要把类当成名字空间使用，而是把这些函数以名字空间分组. 一个类的静态方法一般要和这个类的实例或者这个类的静态成员紧密相关.

优点:

    某些情况下, 非成员函数和静态成员函数是非常有用的. 将非成员函数放在名字空间内可避免污染全局作用域.

缺点:

    将非成员函数和静态成员函数作为新类的成员或许更有意义, 当它们需要访问外部资源或具有重要的依赖关系时更是如此.

结论:

    有时, 把函数的定义同类的实例脱钩是有益的, 甚至是必要的. 这样的函数可以被定义成静态成员, 或是非成员函数. 非成员函数不应依赖于外部变量, 并且应尽量置于某个名字空间内. 相比单纯为了封装若干不共享任何静态数据的静态成员函数而创建类, 不如改为使用:ref:`namespaces`. 例如对于头文件 ``myproject/foo_bar.h`` 来说, 照如下写:
    
    .. code-block:: c++
    
        namespace myproject {
        namespace foo_bar {
        void Function1();
        void Function2();
        }  // namespace foo_bar
        }  // namespace myproject
    
    
    而不是: 
    
    .. code-block:: c++
       
        namespace myproject {
        class FooBar {
         public:
          static void Function1();
          static void Function2();
        };
        }  // namespace myproject


    如果你必须定义非成员函数, 又只是在 ``.cc`` 文件中使用它, 可使用匿名:ref:`namespaces`或 ``static`` 链接关键字 (如 ``static int Foo() {...}``) 限定其作用域.
    
2.3. 局部变量
~~~~~~~~~~~~~~~~~~~~~~

.. tip::

    将函数变量尽可能置于最小作用域内, 并在变量声明时进行初始化.

C++ 允许在函数的任何位置声明变量. 我们提倡在尽可能小的作用域中声明变量, 离第一次使用越近越好. 这使得代码浏览者更容易定位变量声明的位置, 了解变量的类型和初始值. 特别是，应使用初始化的方式替代声明再赋值, 比如:

    .. code-block:: c++

        int i;
        i = f(); // 坏——初始化和声明分离
        int j = g(); // 好——初始化时声明

        vector<int> v;
        v.push_back(1); // 用花括号初始化更好
        v.push_back(2);

        vector<int> v = {1, 2}; // 好 —— v 一开始就被初始化


只在 ``if`` 、 ``while`` 、 ``for`` 语句中需要使用的变量应当在这些语句之中声明, 以便使这些变量的作用于被限定在语句之内, 例如: 

    .. code-block:: c++

        while (const char* p = strchr(str, '/')) str = p + 1;
        
警告: 如果上述的变量是一个对象，那么每次进入这个作用域时, 它的构造函数被调用; 每次离开这个作用域时, 它的析构函数被调用.

    .. code-block:: c++
    
        // 低效的实现:
        for (int i = 0; i < 1000000; ++i) {
          Foo f;  // 它的构造和析构函数被调用1000000次
          f.DoSomething(i);
        }

在这个循环之外定义这个变量可能更高效一些:

    .. code-block:: c++
    
        Foo f;  // 它的构造和析构函数只被调用1次
        for (int i = 0; i < 1000000; ++i) {
          f.DoSomething(i);
        }


2.4. 静态和全局变量
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tip::

    禁止使用具有静态生存周期的( `static storage duration <http://en.cppreference.com/w/cpp/language/storage_duration#Storage_duration>`_ )类类型变量: 由于不确定的构造和析构函数调用顺序, 它们会导致难以发现的 bug. 不过 ``constexpr`` 变量除外, 毕竟它们不涉及动态初始化或析构.

静态生存周期的对象, 包括全局变量、静态变量、静态类成员变量和函数静态变量，都必须是原生数据类型 (POD : Plain Old Data): 即 int, char 或 float, 以及 POD 类型的指针、数组或结构体.

静态变量的构造函数和初始化的顺序在 C++ 中是不确定的, 甚至随着构建变化而变化, 导致难以发现的 bug. 所以除禁止使用类类型的全局变量外，我们也不允许用函数返回值来初始化具有名字空间作用域的静态变量，除非该函数 (比如 getenv() 或 getpid()) 不涉及任何全局变量. 但是函数作用域内的静态POD变量不被禁止, 因为它的初始化顺序是有明确定义的, 而且只会在指令执行到它的声明那里才会发生.
同样的, 全局和静态变量在程序终止时会被析构, 无论这个终止是由 ``main()`` 返回还是通过调用 ``exit()`` . 析构顺序正好与构造函数调用的顺序相反. 但既然构造顺序未定义，那么析构顺序当然也就不确定了。比如, 在程序结束时某静态变量已经被析构了, 但代码仍在运行(比如其它线程), 试图访问它且失败. 再比如，某个变量保存对一个静态string变量的引用，但是这个静态string却先一步析构了.

改善上述析构问题的办法之一是用 ``quick_exit()`` 来代替 ``exit()`` 并中断程序. 它们的不同之处是前者不会执行任何析构, 也不会执行 ``atexit()`` 所绑定的任何 handlers. 如果您想在通过 ``quick_exit()`` 结束程序时执行某 handler (比如刷新 log) ，您可以把它绑定到 ``_at_quick_exit()``. (如果您想在 ``exit()`` 和 ``quick_exit()`` 都用上该 handler, 都绑定上去. )

综上所述，我们只允许 POD 类型的静态变量. 这一规定完全禁用 ``vector`` (使用 C 数组替代) 和 ``string`` (使用 ``const char []``).

如果您确实需要一个类类型的静态或全局变量, 可以考虑在 ``main()`` 函数或 ``pthread_once()`` 内初始化一个指针且永不回收. 注意一定要使用 raw 指针而不是智能指针, 毕竟后者的析构函数涉及到上文指出的不定顺序问题。

.. note:: Yang.Y 译注:

    上文提及的静态变量泛指静态生存周期的对象, 包括: 全局变量, 静态变量, 静态类成员变量, 以及函数静态变量.


译者 (YuleFox) 笔记
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. ``cc`` 中的匿名名字空间可避免命名冲突, 限定作用域, 避免直接使用 ``using`` 关键字污染命名空间;
#. 嵌套类符合局部使用原则, 只是不能在其他头文件中前置声明, 尽量不要 ``public``; (注: 嵌套类内容已被删除)
#. 尽量不用全局函数和全局变量, 考虑作用域和命名空间限制, 尽量单独形成编译单元;
#. 多线程中的全局变量 (含静态成员变量) 不要使用 ``class`` 类型 (含 STL 容器), 避免不明确行为导致的 bug;
#. 作用域的使用, 除了考虑名称污染、可读性之外, 主要是为降低耦合, 提高编译/执行效率.

译者（acgtyrant）笔记
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. 注意「using 指示（using-directive）」和「using 声明（using-declaration）」的区别。
#. 匿名名字空间说白了就是文件作用域，就像 C static 声明的作用域一样，后者已经被 C++ 标准提倡弃用。
#. 局部变量在声明的同时进行显式值初始化，比起隐式初始化再赋值的两步过程要高效，同时也贯彻了计算机体系结构重要的概念「局部性（locality）」。
#. 注意别在循环犯大量构造和析构的低级错误。
